"""
闭包的结构
1. 外部函数： 外部函数返回内部函数的引用
2. 内部函数： 内部函数使用了外部函数的参数或者的变量
  把这种结构的整体称为闭包
"""
import time


def outer(number):
    def inner(sum):
        print(sum)
        print("内部函数使用了外部函数的参数或者变量%d"%number)

    return inner

f=outer(50) # 构建了一个简单实例对象
time.sleep(1)
f("闭包的内部函数")
f(200)

"""
闭包与普通函数的区别
1. 普通函数能保存功能，但是不能保存传送给函数的数据
    比如执行函数foo(1000)后，1000这个值就没有办法保存到内存中了
2. 闭包能保存功能，也可以保存数据， 好比一个非常轻量级的类(属性，方法)
    当执行fun(100)后，还可以在内存中保存100 这个数据
"""
# 定义一个普通函数
def task(number):
    print(number)

task(50)
task(100)

